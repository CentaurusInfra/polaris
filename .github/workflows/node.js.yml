# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    
    # Build all Polaris components
    - run: npx nx build core
    - run: npx nx build mappings-common-mappings
    - run: npx nx build orchestrators-kubernetes
    - run: npx nx build query-backends-prometheus
    - run: npx nx build metrics-cost-efficiency
    - run: npx nx build schema-gen
    - run: npx nx build polaris-nx
    - run: npx nx build cli-polaris-cli
    - run: npx nx build elasticity-horizontal-elasticity-strategy-controller
    - run: npx nx build elasticity-vertical-elasticity-strategy-controller
    - run: npx nx build metrics-rest-api-cost-efficiency-controller
    - run: npx nx build slo-cost-efficiency-slo-controller
    - run: npx nx build slo-cpu-usage-slo-controller
    - run: npx nx build ui-polaris-ui
    
    # Run the tests for all Polaris components
    - run: npx nx run core:test
    - run: npx nx run mappings-common-mappings:test
    - run: npx nx run orchestrators-kubernetes:test
    - run: npx nx run query-backends-prometheus:test
    - run: npx nx run metrics-cost-efficiency:test
    - run: npx nx run schema-gen:test
    - run: npx nx run polaris-nx:test
    - run: npx nx run cli-polaris-cli:test
    - run: npx nx run elasticity-horizontal-elasticity-strategy-controller:test
    - run: npx nx run elasticity-vertical-elasticity-strategy-controller:test
    - run: npx nx run metrics-rest-api-cost-efficiency-controller:test
    - run: npx nx run slo-cost-efficiency-slo-controller:test
    - run: npx nx run slo-cpu-usage-slo-controller:test
    
    # Check if schema generation and SloMapping Serialization execute
    - run: npm run gen-crds
    - run: npm run serialize-slo-mappings
    
    # Ensure that we have no circular dependencies
    - run: npm run ts-circular-dep-check
