# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Polaris CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # Builds all Polaris components
  build:
    runs-on: ubuntu-latest
    env:
      working-dir: ./ts
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    # Checkout and install dependencies.
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./ts/package-lock.json
    - run: npm ci
      working-directory: ${{ env.working-dir }}

    # Build the Polaris components
    - run: npx nx build core
      working-directory: ${{ env.working-dir }}
    - run: npx nx build common-mappings
      working-directory: ${{ env.working-dir }}
    - run: npx nx build orchestrators-kubernetes
      working-directory: ${{ env.working-dir }}
    - run: npx nx build query-backends-prometheus
      working-directory: ${{ env.working-dir }}
    - run: npx nx build metrics-cost-efficiency
      working-directory: ${{ env.working-dir }}
    - run: npx nx build schema-gen
      working-directory: ${{ env.working-dir }}
    - run: npx nx build polaris-nx
      working-directory: ${{ env.working-dir }}
    - run: npx nx build cli-polaris-cli
      working-directory: ${{ env.working-dir }}
    - run: npx nx build elasticity-horizontal-elasticity-strategy-controller
      working-directory: ${{ env.working-dir }}
    - run: npx nx build elasticity-vertical-elasticity-strategy-controller
      working-directory: ${{ env.working-dir }}
    - run: npx nx build metrics-rest-api-cost-efficiency-controller
      working-directory: ${{ env.working-dir }}
    - run: npx nx build slo-cost-efficiency-slo-controller
      working-directory: ${{ env.working-dir }}
    - run: npx nx build slo-cpu-usage-slo-controller
      working-directory: ${{ env.working-dir }}
    - run: npx nx build ui-polaris-ui
      working-directory: ${{ env.working-dir }}


  # Runs the tests for all Polaris components
  test:
    runs-on: ubuntu-latest
    env:
      working-dir: ./ts
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    # Checkout and install dependencies.
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./ts/package-lock.json
    - run: npm ci
      working-directory: ${{ env.working-dir }}

    # Run the tests
    - run: npx nx run core:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run common-mappings:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run orchestrators-kubernetes:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run query-backends-prometheus:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run metrics-cost-efficiency:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run schema-gen:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run polaris-nx:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run cli-polaris-cli:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run elasticity-horizontal-elasticity-strategy-controller:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run elasticity-vertical-elasticity-strategy-controller:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run metrics-rest-api-cost-efficiency-controller:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run slo-cost-efficiency-slo-controller:test
      working-directory: ${{ env.working-dir }}
    - run: npx nx run slo-cpu-usage-slo-controller:test
      working-directory: ${{ env.working-dir }}

    # Check if schema generation and SloMapping Serialization execute
    - run: npm run gen-crds
      working-directory: ${{ env.working-dir }}
    - run: npm run serialize-slo-mappings
      working-directory: ${{ env.working-dir }}

    # Ensure that we have no circular dependencies
    - run: npm run ts-circular-dep-check
      working-directory: ${{ env.working-dir }}

  # ToDo: Add Verdaccio to the job to allow executing e2e for an unpublished package version.
  # Currently this would fail, because npm would try to download the unpublished Polaris packages from the public npm registry.
  # # Runs the E2E tests
  # e2e:
  #   runs-on: ubuntu-latest
  #   env:
  #     working-dir: ./ts
  #   strategy:
  #     matrix:
  #       node-version: [14.x]
  #   steps:
  #   # Checkout and install dependencies.
  #   - uses: actions/checkout@v2
  #   - name: Use Node.js ${{ matrix.node-version }}
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: ${{ matrix.node-version }}
  #       cache: 'npm'
  #       cache-dependency-path: ./ts/package-lock.json
  #   - run: npm ci
  #     working-directory: ${{ env.working-dir }}
  #
  #   # Build required components
  #   - run: npx nx build polaris-nx
  #     working-directory: ${{ env.working-dir }}
  #   # E2E tests
  #   - run: npx nx run polaris-nx-e2e:e2e
  #     working-directory: ${{ env.working-dir }}
