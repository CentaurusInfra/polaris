kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    polaris-slo-cloud.github.io/schema-gen-version: 0.2.0-beta.24
  name: costefficiencymetricmappings.metrics.polaris-slo-cloud.github.io
spec:
  group: metrics.polaris-slo-cloud.github.io
  names:
    kind: CostEfficiencyMetricMapping
    listKind: CostEfficiencyMetricMappingList
    singular: costefficiencymetricmapping
    plural: costefficiencymetricmappings
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required:
            - metadata
            - spec
            - apiVersion
            - kind
          description: >-
            Used to configure a cost efficiency composed metric controller to
            compute its metric for a specific target.
          properties:
            metadata:
              type: object
            spec:
              type: object
              required:
                - targetRef
                - metricConfig
              description: >-
                Defines the configuration data for a composed metric mapping
                that is used for configuring a composed metric controller.
              properties:
                targetRef:
                  type: object
                  required:
                    - kind
                    - name
                    - apiVersion
                  description: Identifies that target workload for an SLO mapping.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    name:
                      type: string
                      description: The name of the instance.
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                metricConfig:
                  type: object
                  properties:
                    targetThreshold:
                      type: integer
                      description: >-
                        The target threshold for the `performance` part of the
                        cost efficiency equation.


                        Depending on the specific cost efficiency metric
                        implementation, the threshold may be considered as a
                        lower bound (`performance` samples should be above the
                        threshold) or as an upper bound (`performance` samples
                        should be below the threshold).


                        If the implementation of the metric relies on a
                        bucketing mechanism (e.g., Prometheus histograms), the
                        set of allowed values may be limited.
                      format: int64
                  required:
                    - targetThreshold
                  description: >-
                    Limited alternative for `Omit<T, K>` that provides a
                    workaround for an issue with ts-json-schema-generator.


                    While ts-json-schema-generator can handle `Omit<SomeType,
                    K>`, it throws the following error when `SomeType` is itself
                    a generic parameter: ``` LogicError: Unexpected key type
                    "undefined" for type "{     [P in K]: T[P]; }" (expected
                    "UnionType" or "StringType") ```


                    `CrdOmit` does not remove the properties from `T` like
                    `Omit` would, but it's workaround that works with
                    ts-json-schema-generator.
            apiVersion:
              type: string
              description: >-
                APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            kind:
              type: string
              description: >-
                Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase.
                More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

---

kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    polaris-slo-cloud.github.io/schema-gen-version: 0.2.0-beta.24
  name: costefficiencyslomappings.slo.polaris-slo-cloud.github.io
spec:
  group: slo.polaris-slo-cloud.github.io
  names:
    kind: CostEfficiencySloMapping
    listKind: CostEfficiencySloMappingList
    singular: costefficiencyslomapping
    plural: costefficiencyslomappings
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required:
            - metadata
            - spec
            - apiVersion
            - kind
          description: >-
            The Cost Efficiency SLO is based on the *cost efficiency* of a REST
            service.


            The cost efficiency of a REST service is calculated as: (number of
            requests per second served faster than a configured threshold)
            divided by (total cost of the service).
          properties:
            metadata:
              type: object
            spec:
              type: object
              required:
                - elasticityStrategy
                - sloConfig
                - targetRef
              description: The spec for a `CostEfficiencySloMapping`.
              properties:
                targetRef:
                  type: object
                  required:
                    - kind
                    - name
                    - apiVersion
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    name:
                      type: string
                      description: The name of the instance.
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                elasticityStrategy:
                  type: object
                  required:
                    - kind
                    - apiVersion
                  description: Identifies an elasticity strategy kind/type.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                stabilizationWindow:
                  type: object
                  description: >-
                    StabilizationWindow allows configuring the period of time
                    that an elasticity strategy controller will wait after
                    applying the strategy once, before applying it again (if the
                    SLO is still violated), to avoid unnecessary scaling.


                    For example, suppose that ScaleUpSeconds = 180 and a
                    horizontal elasticity strategy scales out at time `t` due to
                    an SLO violation. At time `t + 20 seconds` the SLO's
                    evaluation still results in a violation, but the elasticity
                    strategy does not scale again, because the stabilization
                    window for scaling up/out has not yet passed. If the SLO
                    evaluation at `t + 200 seconds` still results in a
                    violation, the controller will scale again.
                  properties:
                    scaleUpSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        increases resources (e.g., scale up/out) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 60
                      format: int64
                    scaleDownSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        decreases resources (e.g., scale down/in) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 300
                      format: int64
                sloConfig:
                  type: object
                  properties:
                    responseTimeThresholdMs:
                      type: integer
                      enum:
                        - 10
                        - 25
                        - 50
                        - 100
                        - 250
                        - 500
                        - 1000
                        - 2500
                        - 5000
                        - 10000
                      description: >-
                        The response time threshold in milliseconds, below which
                        all requests should be answered, i.e., ideally all
                        responses should be faster than this value.
                      format: int64
                    targetCostEfficiency:
                      type: integer
                      description: The desired cost efficiency value.
                      minimum: 0
                      format: int64
                    minRequestsPercentile:
                      type: integer
                      description: >-
                        The minimum percentile of requests that should be faster
                        than `responseTimeThresholdMs`.


                        A low cost efficiency value can indicate either a) that
                        the system cannot handle a very high load or, b) that
                        the load is very low and the system has too many
                        resources. The `minRequestsPercentile` is used to
                        distinguish these two cases.


                        If the cost efficiency is low and the number of requests
                        faster than the threshold is below this percentile, we
                        know that we are dealing with case a), i.e., the SLO
                        compliance percentage will be above 100% (e.g., more
                        resources are needed).


                        Whereas, if the number of requests faster than the
                        threshold is above this percentile, we know that we are
                        dealing with case b), i.e., the SLO compliance
                        percentage will be below 100% (e.g., resources can be
                        reduced).
                      default: 90
                      format: int64
                  required:
                    - responseTimeThresholdMs
                    - targetCostEfficiency
                  description: The configuration of a Cost Efficiency SLO Mapping.
                staticElasticityStrategyConfig:
                  type: object
                  additionalProperties: true
                  description: >-
                    Any static configuration parameters, which are unknown to
                    the SLO, but which may be required to configure the chosen
                    kind of elasticity strategy should be specified here. They
                    will be copied over into the spec of the elasticity
                    strategy.


                    For example, suppose the SLO knows only about the parameters
                    in `SloCompliance`, but you want to use an elasticity
                    strategy that requires an additional parameter, e.g.,
                    `maxReplicas`. This can be configured when instantiating the
                    SloMapping:


                    ``` new MySloMapping({      elasticityStrategy: new
                    ElasticityStrategyKind({          kind:
                    'my-special-elasticity-strategy-kind',          ...
                    }),      ...,      staticElasticityStrategyConfig:
                    {          // Anything in here will be copied over to the
                    `staticConfig` property of the elasticity strategy
                    spec.          maxReplicas: 100,      }, }); ```
            apiVersion:
              type: string
              description: >-
                APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            kind:
              type: string
              description: >-
                Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase.
                More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

---

kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    polaris-slo-cloud.github.io/schema-gen-version: 0.2.0-beta.24
  name: cpuusageslomappings.slo.polaris-slo-cloud.github.io
spec:
  group: slo.polaris-slo-cloud.github.io
  names:
    kind: CPUUsageSloMapping
    listKind: CPUUsageSloMappingList
    singular: cpuusageslomapping
    plural: cpuusageslomappings
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required:
            - metadata
            - spec
            - apiVersion
            - kind
          description: >-
            The CPU Usage SLO allows configuring an average CPU utilization
            percentage across all instances of a workload.
          properties:
            metadata:
              type: object
            spec:
              type: object
              required:
                - elasticityStrategy
                - sloConfig
                - targetRef
              description: The spec for a `CpuUsageSloMapping`.
              properties:
                targetRef:
                  type: object
                  required:
                    - kind
                    - name
                    - apiVersion
                  description: Identifies that target workload for an SLO mapping.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    name:
                      type: string
                      description: The name of the instance.
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                elasticityStrategy:
                  type: object
                  required:
                    - kind
                    - apiVersion
                  description: Identifies an elasticity strategy kind/type.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                stabilizationWindow:
                  type: object
                  description: >-
                    StabilizationWindow allows configuring the period of time
                    that an elasticity strategy controller will wait after
                    applying the strategy once, before applying it again (if the
                    SLO is still violated), to avoid unnecessary scaling.


                    For example, suppose that ScaleUpSeconds = 180 and a
                    horizontal elasticity strategy scales out at time `t` due to
                    an SLO violation. At time `t + 20 seconds` the SLO's
                    evaluation still results in a violation, but the elasticity
                    strategy does not scale again, because the stabilization
                    window for scaling up/out has not yet passed. If the SLO
                    evaluation at `t + 200 seconds` still results in a
                    violation, the controller will scale again.
                  properties:
                    scaleUpSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        increases resources (e.g., scale up/out) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 60
                      format: int64
                    scaleDownSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        decreases resources (e.g., scale down/in) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 300
                      format: int64
                sloConfig:
                  type: object
                  properties:
                    targetAvgCPUUtilizationPercentage:
                      type: integer
                      description: >-
                        The average CPU utilization that should be achieved
                        across all instances of the target.
                      format: int64
                  required:
                    - targetAvgCPUUtilizationPercentage
                  description: Configuration for a `CpuUsageSloMapping`.
                staticElasticityStrategyConfig:
                  type: object
                  additionalProperties: true
                  description: >-
                    Any static configuration parameters, which are unknown to
                    the SLO, but which may be required to configure the chosen
                    kind of elasticity strategy should be specified here. They
                    will be copied over into the spec of the elasticity
                    strategy.


                    For example, suppose the SLO knows only about the parameters
                    in `SloCompliance`, but you want to use an elasticity
                    strategy that requires an additional parameter, e.g.,
                    `maxReplicas`. This can be configured when instantiating the
                    SloMapping:


                    ``` new MySloMapping({      elasticityStrategy: new
                    ElasticityStrategyKind({          kind:
                    'my-special-elasticity-strategy-kind',          ...
                    }),      ...,      staticElasticityStrategyConfig:
                    {          // Anything in here will be copied over to the
                    `staticConfig` property of the elasticity strategy
                    spec.          maxReplicas: 100,      }, }); ```
            apiVersion:
              type: string
              description: >-
                APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            kind:
              type: string
              description: >-
                Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase.
                More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

---

kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    polaris-slo-cloud.github.io/schema-gen-version: 0.2.0-beta.24
  name: horizontalelasticitystrategies.elasticity.polaris-slo-cloud.github.io
spec:
  group: elasticity.polaris-slo-cloud.github.io
  names:
    kind: HorizontalElasticityStrategy
    listKind: HorizontalElasticityStrategyList
    singular: horizontalelasticitystrategy
    plural: horizontalelasticitystrategies
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required:
            - metadata
            - spec
            - apiVersion
            - kind
          description: Denotes an elasticity strategy that employs horizontal scaling.
          properties:
            metadata:
              type: object
            spec:
              type: object
              required:
                - targetRef
                - sloOutputParams
              description: >-
                A generic class that is used to set up specs for an elasticity
                strategy.


                A concrete `ElasticityStrategy` may use
                `ElasticityStrategySpec<T>` directly as the type for its spec,
                or a class derived from this one, if, e.g., the transformation
                needs to be customized.


                Parameters that are defined by the output of the SLO are stored
                in `sloOutputParams`. The type of this property determines if an
                elasticity strategy is compatible with a certain SLO.


                `staticConfig` should be used for other configuration data,
                which is not changed by the SLO.
              properties:
                targetRef:
                  type: object
                  required:
                    - kind
                    - name
                    - apiVersion
                  description: Identifies that target workload for an SLO mapping.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    name:
                      type: string
                      description: The name of the instance.
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                sloOutputParams:
                  type: object
                  properties:
                    currSloCompliancePercentage:
                      type: integer
                      description: >-
                        Specifies how much the current state of the system
                        complies with the SLO.


                        This value must be specified as an integer, e.g., `50`
                        meaning 50%, `100` meaning 100%, `200` meaning 200%.


                        If this value is `100`, the SLO is met exactly and no
                        scaling action is required.


                        If this value is greater than `100`, the SLO is violated
                        and scaling out/up is required.


                        If this value is less than `100`, the system is
                        performing better than the SLO demands and scaling
                        in/down will be performed.
                      format: int64
                    tolerance:
                      type: integer
                      description: >-
                        Specifies the tolerance around 100%, within which no
                        scaling will be performed.


                        For example, if tolerance is `10`, no scaling will be
                        performed as long as `currSloCompliancePercentage` is
                        between `90` and `110`.
                      format: int64
                  required:
                    - currSloCompliancePercentage
                  description: >-
                    Defines a generic mechanism for specifying how much an SLO
                    is being violated or outperformed.
                stabilizationWindow:
                  type: object
                  description: >-
                    StabilizationWindow allows configuring the period of time
                    that an elasticity strategy controller will wait after
                    applying the strategy once, before applying it again (if the
                    SLO is still violated), to avoid unnecessary scaling.


                    For example, suppose that ScaleUpSeconds = 180 and a
                    horizontal elasticity strategy scales out at time `t` due to
                    an SLO violation. At time `t + 20 seconds` the SLO's
                    evaluation still results in a violation, but the elasticity
                    strategy does not scale again, because the stabilization
                    window for scaling up/out has not yet passed. If the SLO
                    evaluation at `t + 200 seconds` still results in a
                    violation, the controller will scale again.
                  properties:
                    scaleUpSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        increases resources (e.g., scale up/out) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 60
                      format: int64
                    scaleDownSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        decreases resources (e.g., scale down/in) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 300
                      format: int64
                staticConfig:
                  type: object
                  properties:
                    minReplicas:
                      type: integer
                      description: >-
                        The minimum number of replicas that the target workload
                        must have.
                      default: 1
                      format: int64
                    maxReplicas:
                      type: integer
                      description: >-
                        The maximum number of replicas that the target workload
                        may have.


                        Default: unlimited
                      format: int64
                  description: >-
                    Commonly used, optional, static configuration for an
                    elasticity strategy that employs horizontal scaling.
            apiVersion:
              type: string
              description: >-
                APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            kind:
              type: string
              description: >-
                Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase.
                More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

---

kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    polaris-slo-cloud.github.io/schema-gen-version: 0.2.0-beta.24
  name: verticalelasticitystrategies.elasticity.polaris-slo-cloud.github.io
spec:
  group: elasticity.polaris-slo-cloud.github.io
  names:
    kind: VerticalElasticityStrategy
    listKind: VerticalElasticityStrategyList
    singular: verticalelasticitystrategy
    plural: verticalelasticitystrategies
  scope: Namespaced
  versions:
    - name: v1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required:
            - metadata
            - spec
            - apiVersion
            - kind
          description: Denotes an elasticity strategy that employs vertical scaling.
          properties:
            metadata:
              type: object
            spec:
              type: object
              required:
                - targetRef
                - sloOutputParams
              description: >-
                A generic class that is used to set up specs for an elasticity
                strategy.


                A concrete `ElasticityStrategy` may use
                `ElasticityStrategySpec<T>` directly as the type for its spec,
                or a class derived from this one, if, e.g., the transformation
                needs to be customized.


                Parameters that are defined by the output of the SLO are stored
                in `sloOutputParams`. The type of this property determines if an
                elasticity strategy is compatible with a certain SLO.


                `staticConfig` should be used for other configuration data,
                which is not changed by the SLO.
              properties:
                targetRef:
                  type: object
                  required:
                    - kind
                    - name
                    - apiVersion
                  description: Identifies that target workload for an SLO mapping.
                  properties:
                    kind:
                      type: string
                      description: >-
                        Kind is a string value representing the REST resource
                        this object represents. Servers may infer this from the
                        endpoint the client submits requests to. Cannot be
                        updated. In CamelCase. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                    name:
                      type: string
                      description: The name of the instance.
                    apiVersion:
                      type: string
                      description: >-
                        APIVersion defines the versioned schema of this
                        representation of an object. Servers should convert
                        recognized schemas to the latest internal value, and may
                        reject unrecognized values. More info:
                        https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                sloOutputParams:
                  type: object
                  properties:
                    currSloCompliancePercentage:
                      type: integer
                      description: >-
                        Specifies how much the current state of the system
                        complies with the SLO.


                        This value must be specified as an integer, e.g., `50`
                        meaning 50%, `100` meaning 100%, `200` meaning 200%.


                        If this value is `100`, the SLO is met exactly and no
                        scaling action is required.


                        If this value is greater than `100`, the SLO is violated
                        and scaling out/up is required.


                        If this value is less than `100`, the system is
                        performing better than the SLO demands and scaling
                        in/down will be performed.
                      format: int64
                    tolerance:
                      type: integer
                      description: >-
                        Specifies the tolerance around 100%, within which no
                        scaling will be performed.


                        For example, if tolerance is `10`, no scaling will be
                        performed as long as `currSloCompliancePercentage` is
                        between `90` and `110`.
                      format: int64
                  required:
                    - currSloCompliancePercentage
                  description: >-
                    Defines a generic mechanism for specifying how much an SLO
                    is being violated or outperformed.
                stabilizationWindow:
                  type: object
                  description: >-
                    StabilizationWindow allows configuring the period of time
                    that an elasticity strategy controller will wait after
                    applying the strategy once, before applying it again (if the
                    SLO is still violated), to avoid unnecessary scaling.


                    For example, suppose that ScaleUpSeconds = 180 and a
                    horizontal elasticity strategy scales out at time `t` due to
                    an SLO violation. At time `t + 20 seconds` the SLO's
                    evaluation still results in a violation, but the elasticity
                    strategy does not scale again, because the stabilization
                    window for scaling up/out has not yet passed. If the SLO
                    evaluation at `t + 200 seconds` still results in a
                    violation, the controller will scale again.
                  properties:
                    scaleUpSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        increases resources (e.g., scale up/out) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 60
                      format: int64
                    scaleDownSeconds:
                      type: integer
                      description: >-
                        The number of seconds after the previous scaling
                        operation to wait before an elasticity action that
                        decreases resources (e.g., scale down/in) or an
                        equivalent configuration change can be issued due to an
                        SLO violation.
                      minimum: 0
                      default: 300
                      format: int64
                staticConfig:
                  type: object
                  properties:
                    minResources:
                      type: object
                      properties:
                        memoryMiB:
                          type: integer
                          description: |-
                            The memory in MiB.

                            This must be an integer.
                          format: int64
                        milliCpu:
                          type: integer
                          description: >-
                            The CPU cores in milli CPU (1000 milli CPU = 1 CPU
                            core).


                            This must be an integer.
                          format: int64
                      required:
                        - memoryMiB
                        - milliCpu
                      description: >-
                        Describes the resources used/required by a container or
                        set of containers.
                    maxResources:
                      type: object
                      properties:
                        memoryMiB:
                          type: integer
                          description: |-
                            The memory in MiB.

                            This must be an integer.
                          format: int64
                        milliCpu:
                          type: integer
                          description: >-
                            The CPU cores in milli CPU (1000 milli CPU = 1 CPU
                            core).


                            This must be an integer.
                          format: int64
                      required:
                        - memoryMiB
                        - milliCpu
                      description: >-
                        Describes the resources used/required by a container or
                        set of containers.
                    scaleUpPercent:
                      type: integer
                      description: >-
                        The percentage by which to increase the existing
                        resources in a single scale up step.


                        E.g., `scaleUpPercent: 10` means that the existing
                        `memoryMib` and `milliCpu` values will be increased by
                        10 percent in a single scale up step.
                      default: 10
                      format: int64
                    scaleDownPercent:
                      type: integer
                      description: >-
                        The percentage by which to decrease the existing
                        resources in a single scale down step.


                        E.g., `scaleDownPercent: 10` means that the existing
                        `memoryMib` and `milliCpu` values will be decreased by
                        10 percent in a single scale down step.
                      default: 10
                      format: int64
                  required:
                    - minResources
                    - maxResources
                  description: >-
                    Commonly used, optional, static configuration for an
                    elasticity strategy that employs vertical scaling.
            apiVersion:
              type: string
              description: >-
                APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the
                latest internal value, and may reject unrecognized values. More
                info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            kind:
              type: string
              description: >-
                Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase.
                More info:
                https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds

---

apiVersion: v1
kind: Namespace
metadata:
  name: polaris
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: horizontal-elasticity-strategy-controller
  namespace: polaris
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # ClusterRoles are not namespaced
  name: horizontal-elasticity-strategy-controller
rules:

# Allow reading all Elasticity Strategy types
# - apiGroups:
#   - elasticity.polaris-slo-cloud.github.io
#   resources:
#   - "*"
#   verbs:
#   - get
#   - watch
#   - list

# Allow reading supported Elasticity Strategy types
- apiGroups:
  - elasticity.polaris-slo-cloud.github.io
  resources:
  - horizontalelasticitystrategies
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - elasticity.polaris-slo-cloud.github.io
  resources:
  - horizontalelasticitystrategies/status
  verbs:
  - get

# Allow reading and updating all Scale subresources
- apiGroups:
  - '*'
  resources:
  - '*/scale'
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
# Optionally, we could create a RoleBinding and to scope the permissions to a specific namespace
metadata:
  name: control-horizontal-elasticity-strategies
subjects:
  - kind: ServiceAccount
    name: horizontal-elasticity-strategy-controller
    namespace: polaris
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: horizontal-elasticity-strategy-controller

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: horizontal-elasticity-strategy-controller
    tier: control-plane
  name: horizontal-elasticity-strategy-controller
  namespace: polaris
spec:
  selector:
    matchLabels:
      component: horizontal-elasticity-strategy-controller
      tier: control-plane
  replicas: 1
  template:
    metadata:
      labels:
        component: horizontal-elasticity-strategy-controller
        tier: control-plane
    spec:
      serviceAccountName: horizontal-elasticity-strategy-controller
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  # Ensure that the controller is only scheduled on Intel 64-bit nodes.
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      tolerations:
        # Ensure that the controller can be scheduled on master nodes.
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      containers:
      - image: polarissloc/horizontal-elasticity-strategy:0.3.0
        name: elasticity-controller
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
        securityContext:
          privileged: false
        env:
          # Workaround for an issue with kubernetes-client when using IPv6 (https://github.com/kubernetes-client/javascript/issues/599)
          - name: KUBERNETES_SERVICE_HOST
            value: kubernetes.default.svc


---

apiVersion: v1
kind: Namespace
metadata:
  name: polaris
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vertical-elasticity-strategy-controller
  namespace: polaris
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  # ClusterRoles are not namespaced
  name: vertical-elasticity-strategy-controller
rules:

# Allow reading all Elasticity Strategy types
# - apiGroups:
#   - elasticity.polaris-slo-cloud.github.io
#   resources:
#   - "*"
#   verbs:
#   - get
#   - watch
#   - list

# Allow reading supported Elasticity Strategy types
- apiGroups:
  - elasticity.polaris-slo-cloud.github.io
  resources:
  - verticalelasticitystrategies
  verbs:
  - get
  - watch
  - list
- apiGroups:
  - elasticity.polaris-slo-cloud.github.io
  resources:
  - verticalelasticitystrategies/status
  verbs:
  - get

# Allow reading and updating all Deployments, StatefulSets, ReplicaSets, and DaemonSets
- apiGroups:
  - 'apps'
  resources:
  - deployments
  - statefulsets
  - replicasets
  - daemonsets
  verbs:
  - get
  - list
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
# Optionally, we could create a RoleBinding and to scope the permissions to a specific namespace
metadata:
  name: control-vertical-elasticity-strategies
subjects:
  - kind: ServiceAccount
    name: vertical-elasticity-strategy-controller
    namespace: polaris
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: vertical-elasticity-strategy-controller

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: vertical-elasticity-strategy-controller
    tier: control-plane
  name: vertical-elasticity-strategy-controller
  namespace: polaris
spec:
  selector:
    matchLabels:
      component: vertical-elasticity-strategy-controller
      tier: control-plane
  replicas: 1
  template:
    metadata:
      labels:
        component: vertical-elasticity-strategy-controller
        tier: control-plane
    spec:
      serviceAccountName: vertical-elasticity-strategy-controller
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  # Ensure that the controller is only scheduled on Intel 64-bit nodes.
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      tolerations:
        # Ensure that the controller can be scheduled on master nodes.
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      containers:
      - image: polarissloc/vertical-elasticity-strategy:0.3.0
        name: elasticity-controller
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
        securityContext:
          privileged: false
        env:
          # Workaround for an issue with kubernetes-client when using IPv6 (https://github.com/kubernetes-client/javascript/issues/599)
          - name: KUBERNETES_SERVICE_HOST
            value: kubernetes.default.svc

---

