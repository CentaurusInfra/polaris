apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: metrics-rest-api-cost-efficiency-controller
    tier: control-plane
  name: metrics-rest-api-cost-efficiency-controller
  namespace: polaris
spec:
  selector:
    matchLabels:
      component: metrics-rest-api-cost-efficiency-controller
      tier: control-plane
  replicas: 1
  template:
    metadata:
      labels:
        component: metrics-rest-api-cost-efficiency-controller
        tier: control-plane
        polaris-controller-type: composed-metric
    spec:
      serviceAccountName: metrics-rest-api-cost-efficiency-controller
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  # Ensure that the controller is only scheduled on Intel 64-bit nodes.
                  - key: kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      tolerations:
        # Ensure that the controller can be scheduled on master nodes.
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      containers:
      - image: polarissloc/metrics-rest-api-cost-efficiency-controller:latest
        name: metrics-controller
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
        ports:
          - name: metrics
            containerPort: 3000
        securityContext:
          privileged: false
        env:
          - name: PROMETHEUS_METRICS_ENDPOINT_PORT
            value: '3000' # If this is changed, the containerPort above needs to be changed accordingly as well.
          - name: PROMETHEUS_METRICS_ENDPOINT_PATH
            value: /metrics
          # Workaround for an issue with kubernetes-client when using IPv6 (https://github.com/kubernetes-client/javascript/issues/599)
          - name: KUBERNETES_SERVICE_HOST
            value: kubernetes.default.svc

