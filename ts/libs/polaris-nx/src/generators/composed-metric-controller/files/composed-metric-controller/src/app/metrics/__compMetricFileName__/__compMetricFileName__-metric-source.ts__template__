import { ComposedMetricSourceBase, PolarisRuntime, Sample } from '@polaris-sloc/core';
import { <%= compMetricValueType %>, <%= compMetricParams %> } from '<%= compMetricTypePkg %>';
import { Observable } from 'rxjs';

// ToDo:
// 1. Adapt the list of `supportedSloTargetTypes` in `<%= compMetricType %>SourceFactory` (see <%= compMetricFileName%>-metric-source.factory.ts).
// 2. Adapt the `<%= compMetricType %>SourceFactory.metricSourceName`, if needed (e.g., if there are multiple sources for <%= compMetricType %> that differ
//    based on the supported SloTarget types).
// 3. Implement `<%= compMetricType %>Source.getValueStream()` to compute the metric.
// 4. Adapt the `release` label in `../../../../manifests/kubernetes/3-service-monitor.yaml` to ensure that Prometheus will scrape this controller.

/**
 * Computes the `<%= compMetricValueType %>` composed metric.
 */
export class <%= compMetricType %>Source extends ComposedMetricSourceBase<<%= compMetricValueType %>> {

    constructor(private params: <%= compMetricParams %>, polarisRuntime: PolarisRuntime) {
        super(polarisRuntime);
    }

    getValueStream(): Observable<Sample<<%= compMetricValueType %>>> {
        // ToDo
    }

}
